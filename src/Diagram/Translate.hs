{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RecordWildCards #-}

module Diagram.Translate
    (

    ) where

import Diagram.Graph
import Data.Traversable (for)
import Control.Monad

-- data Node = Node
--     { basis :: Maybe Basis
--     , arg   :: Maybe Double
--     , arity :: Int
--     , out   :: [] Node
--     , tag   :: Int
--     } deriving (Eq, Show)

inputs :: Int -> Int -> Int -> Node
inputs arity tag qnum = undefined

tnode = Node
  { basis = Just Z
  , arg   = Just 1
  , arity = 1
  , out   = pure $ Node
    { basis = Just X
    , arg   = Just 1
    , arity = 1
    , out   = [i 2, i 3]
    , tag   = 1
    }
  , tag = 0
  } where i = Node Nothing Nothing 1 []

setup :: Graph [Node] -> Graph String
setup g_ns = do
  ns <- g_ns
  let a_ns   = map arity ns
      anchor = flip replicateM wire
  ws <- mapM anchor a_ns
  let tross = undefined
  undefined

translate :: [Node] -> String
translate ns = unlines
  [ boilerplate
  , concat $ zipWith creepNode [0..] ns
  ]

creepNode :: Int -> Node -> String
creepNode q n@Node{..} = unlines
  [ concat $ zipWith creepNode [q..] out 
  , vertex q n
  , concatMap (edge n) out
  ]

-- v = g.add_vertex(zx.VertexType.Z, qubit=0, row=1, phase=1)
-- g.add_edge(g.edge(v,w),edgetype=zx.EdgeType.SIMPLE)

edge :: Node -> Node -> String
edge Node{tag=v} Node{tag=w} = concat
  [ "g.add_edge(g.edge(v", show v, ", v", show w, ")"
  , ", edgetype=zx.EdgeType.SIMPLE)\n"
  ] 

vertex :: Int -> Node -> String
vertex q Node{tag, basis=Just basis, arg=Just arg} = concat
  [ 'v' : show tag -- specify variable name by tag
  , " = g.add_vertex(zx.VertexType." ++ show basis
  , ", qubit=" ++ show q
  , ", row=" ++ show tag
  , ", phase=" ++ show arg
  , ")"
  ]
vertex q Node{tag} = concat
  [ 'v' : show tag -- specify variable name by tag
  , " = g.add_vertex(zx.VertexType.BOUNDARY"
  , ", qubit=" ++ show q
  , ", row=" ++ show tag
  , ")"
  ]

boilerplate :: String
boilerplate = unlines
  [ "# This file is generated by the Zedex compiler."
  , "import pyzx as zx"
  , "g = zx.Graph()"
  ]

test = putStrLn . translate . pure . runGraph
