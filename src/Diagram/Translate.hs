
module Diagram.Translate
    (

    ) where

import Diagram.Graph

-- data Node = Node
--     { basis :: Maybe Basis
--     , arg   :: Maybe Double
--     , arity :: Int
--     , out   :: [] Node
--     , tag   :: Int
--     } deriving (Eq, Show)

translate :: Node -> String
translate = undefined

-- v = g.add_vertex(zx.VertexType.Z, qubit=0, row=1, phase=1)
-- g.add_edge(g.edge(v,w),edgetype=zx.EdgeType.SIMPLE)

vertex :: Node -> String
vertex (Node b a ar o t) = unwords
  [ 'v' : show t -- specify variable name by tag
  , "= g.add_vertex(zx.VertexType." ++ show b
  , ""
  ]

boilerplate :: String
boilerplate = unlines
  [ "# This file is generated by the Zedex compiler."
  , "import pyzx as zx"
  , "g = zx.Graph()"
  ]