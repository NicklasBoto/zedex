-- Haskell module generated by the BNF converter

module Frontend.Zedex.Skel where

import qualified Frontend.Zedex.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Frontend.Zedex.Abs.Id -> Result
transId x = case x of
  Frontend.Zedex.Abs.Id string -> failure x
transScalar :: Frontend.Zedex.Abs.Scalar -> Result
transScalar x = case x of
  Frontend.Zedex.Abs.Scalar string -> failure x
transProgram :: Frontend.Zedex.Abs.Program -> Result
transProgram x = case x of
  Frontend.Zedex.Abs.Progr toplevels -> failure x
transToplevel :: Frontend.Zedex.Abs.Toplevel -> Result
transToplevel x = case x of
  Frontend.Zedex.Abs.ToplF id ids expr -> failure x
  Frontend.Zedex.Abs.ToplX complex ids expr -> failure x
  Frontend.Zedex.Abs.ToplZ complex ids expr -> failure x
transExpr :: Frontend.Zedex.Abs.Expr -> Result
transExpr x = case x of
  Frontend.Zedex.Abs.EVar id -> failure x
  Frontend.Zedex.Abs.ETup expr exprs -> failure x
  Frontend.Zedex.Abs.EUnit -> failure x
  Frontend.Zedex.Abs.EApp expr1 expr2 -> failure x
  Frontend.Zedex.Abs.EComp expr1 expr2 -> failure x
  Frontend.Zedex.Abs.EHad expr -> failure x
  Frontend.Zedex.Abs.EAbs ids expr -> failure x
  Frontend.Zedex.Abs.EXAbs complex ids expr -> failure x
  Frontend.Zedex.Abs.EZAbs complex ids expr -> failure x
transComplex :: Frontend.Zedex.Abs.Complex -> Result
transComplex x = case x of
  Frontend.Zedex.Abs.CComp scalar1 scalar2 -> failure x
  Frontend.Zedex.Abs.CComn scalar1 scalar2 -> failure x
  Frontend.Zedex.Abs.CPi -> failure x
  Frontend.Zedex.Abs.CE -> failure x
  Frontend.Zedex.Abs.CExp complex1 complex2 -> failure x
  Frontend.Zedex.Abs.CDiv complex1 complex2 -> failure x
  Frontend.Zedex.Abs.CMul complex1 complex2 -> failure x

